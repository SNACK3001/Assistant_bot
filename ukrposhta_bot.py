
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.filters import BaseFilter

TOKEN = "8172034278:AAFMDdinPV7WIkJ6da_hwPOXH_GWk03UNwE"
ALLOWED_USER_ID = 1958499426

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –§–∏–ª—å—Ç—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class IsOwner(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == ALLOWED_USER_ID

@dp.message(Command("start"), IsOwner())
async def cmd_start(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–º–µ—Ä –¢–¢–ù –£–∫—Ä–ø–æ—à—Ç–∏, —ñ —è —Å–∫–∞–∂—É —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.")

async def track_ukrposhta(ttn: str):
    url = "https://track.ukrposhta.ua/tracking/api/v1/track"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    json_data = {
        "barcode": ttn,
        "language": "UA"
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as response:
            try:
                data = await response.json()
                status = data['lastStatus']['status']
                date = data['lastStatus']['date']
                index = data['lastStatus']['index']
                return f"<b>üì¶ –°—Ç–∞—Ç—É—Å:</b> {status}\n<b>üìÖ –î–∞—Ç–∞:</b> {date}\n<b>üìÆ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</b> {index}"
            except:
                return "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä –¢–¢–ù –∞–±–æ —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

@dp.message(IsOwner())
async def handle_ttn(message: Message):
    ttn = message.text.strip()
    if not ttn.isdigit() or len(ttn) < 13:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –¢–¢–ù (13 —Ü–∏—Ñ—Ä).")
        return
    await message.answer("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞—Ç—É—Å...")
    result = await track_ukrposhta(ttn)
    await message.answer(result)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
